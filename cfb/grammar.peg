WHITESPACE          =  _{ " " | "\t" | NEWLINE }
COMMENT             =  _{ "//" ~ (!NEWLINE ~ ANY)* }

//

program = { SOI ~ instr* ~ EOI }

instr = _{ stmt | expr }
stmt = _{ binding | assignment_binding | for_loop | while_loop | if | const | named_block | jump | builtin | assignment | increment }
expr = { primary ~ (operator ~ expr)* }
    primary = _{ literal | func_call | index | ident }

const = { "const" ~ ident ~ literal }
binding = { "let" ~ ident ~ ":" ~ type }
    type = _{ num_type | str_type | vec_type | grid_type }
        num_type = { "Num" }
        str_type = { "Str" }
        vec_type = { "Vec(" ~ inum_literal ~ ")" }
        grid_type = { "Grid(" ~ inum_literal ~ "," ~ inum_literal ~ ")" }

assignment_binding = { "let" ~ ident ~ "=" ~ literal }
for_loop = { "for" ~ ident ~ "in" ~ inum_literal ~ ("to" | "downto") ~ inum_literal ~ block }
while_loop = { "while" ~ expr ~ block }
if = { "if" ~ expr ~ block }
inline_if = { expr ~ "if" ~ expr ~ "else" ~ expr }
assignment = { (ident | index) ~ ":=" ~ expr }
named_block = { named_block_lbl ~ block }
    named_block_lbl = @{ "@" ~ ident }
jump = { "jump" ~ jump_lbl }
    jump_lbl = @{ ":" ~ ident }
increment = { (ident | index) ~ "++" }

// operator

operator = { add | sub | mul | div | pow | eq | neq | gt | lt | gte | lte | and | or | xor | ncr | npr }
    add = { "+" } 
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    pow = { "^" }
    eq = { "=" }
    neq = { "!=" | "≠" }
    lt = { "<" }
    gt = { ">" }
    lte = { "<=" | "≤" }
    gte = { ">=" | "≥" }
    npr = { "nPr" }
    ncr = { "nCr" }
    and = { "and" }
    or = { "or" }
    xor = { "xor" }


// builtins

builtin = { clrhome | delvar | end | disp | input | prompt | store }
    clrhome = { "ClrHome" }
    delvar = { "DelVar" }
    end = { "End" }
    disp = { "Disp" ~ ((expr ~ ",")* ~ expr)? }
    input = { "Input" ~ ((expr ~ ",")? ~ ident)? }
    prompt = { "Prompt" ~ (ident ~ ",")* ~ ident }
    store = { expr ~ "->" ~ expr }

// util

block = { "{" ~ instr* ~ "}" }
ident =  @{ (ASCII_ALPHANUMERIC | "_" )+ }
index = { ident ~ "[" ~ expr ~ "]" }
func_call = { ident ~ "(" ~ ((expr ~ ",")* ~ expr)? ~ ")" }
literal = { str_literal | bool_literal | num_literal }
    str_literal = { "\"" ~ (raw_str)* ~ "\"" }
        raw_str = { (!("\"") ~ ANY)+ }
    num_literal = _{ inum_literal | fnum_literal }
        inum_literal = @{ "-"? ~ ASCII_DIGIT+ }
        fnum_literal = @{ inum_literal ~ "." ~ ASCII_DIGIT+ }
    bool_literal = _{ "true" | "false" }
 