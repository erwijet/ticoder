
define {
    op_add = 0
    op_sub = 1
    op_mul = 2
    op_div = 3
    op_nop = 4
}

let n_max : Num
let valid : Num
let op1 : Num
let op2 : Num
let op3 : Num
let op4 : Num
let op : Num

let res : Num
let cnt_num_set : Num
let tmp : Num

Menu("  Math24 Menu   ","Create set",AD,"Solve set",AE)

menu "Math24 Menu" {
    "Create set" -> {
        jump :create_set
    },
    "Solve set" -> {
        jump :solve_set
    }
}

menu "Some Menu" {
    "Ok" :: {
        Disp "Hello, world!"
    },
    "Nope" :: {

    }
}

@create_set {
    let op_set : vec(4)
    let num_set : vec(3)

    set cnt_num_set to 0
    set op to op_nop

    ClrHome

    Input "num cap: ",n_max
    ClrHome
    Disp "loadingâ€¦"

    Output(4,1,"  created      ")
    Output(5,1,"     & tested  ")
    Output(8,10,"sets")

    while true {
        let valid = true

        for i in 1 to 4 {
            if abs(num_set(1,I))>n_max or fPart(num_set(i,I)) != 0 {
                valid := false
            }
        }

        if valid == true {
            jump :create_exit
        }

        for i in 1 to 3 {
            op_set[i] := randInt(1, 3)
        }

        while op_set(1) == op_set(1, 2) == op_set(1, 3) {
            for i in 1 to 3 {
                op_set[i] := randInt(1, 3)
            }
        }

        for i in 1 to 4 {
            num_set[i] := randInt(1, round(n_max / 2))
        }

        res := 24

        for i in 1 to 3 {
            let arg = num_set(4 - i)
            op := op_set[4 - i]

            if op == op_add {
                res := arg + res
            }

            if op == op_sub {
                res := arg - res
            }

            if op == op_mul {
                res := arg * res
            }

            if op == op_div {
                res := arg / res
            }
        }

        num_set[1] := res
        cnt_num_set++

        Output(8,3,cnt_num_set)
    }
}



